@page "/posts"

@using DevBlog_BlazorServer.Models
@using Microsoft.Extensions.Configuration
@using Dapper
@using System.Data
@using MySql.Data.MySqlClient
@using Slapper
@inject DataLibrary.Interfaces.IDataAccess _data
@inject IConfiguration _config
@inject DevBlog_BlazorServer.Interfaces.IPostService _posts

@{
    foreach (var post in posts)
    {
        <!-- Render Posts -->
        <div style="margin-top: 20px; border: 2px solid red;">
            <p>@post.UpdateNum</p>
            <p>@post.Date.ToShortDateString()</p>
            <img src=@post.ImgURL />
            <p>@post.Description</p>
            <button class="glyphicon glyphicon-thumbs-up"></button>
            <span>@post.UpVotes</span>
            <button class="glyphicon glyphicon-thumbs-down"></button>
            <span>@post.DownVotes</span>

            <!-- Render Comments -->
            <div>
                @{
                    if (post.Comments[0] != null)
                    {
                        foreach (var comment in post.Comments)
                        {
                            <span>@comment.UserName</span>
                            <span>
                                @comment.Date.ToString("MM/dd/yyyy hh:mm tt")
                            </span>
                            <p>@comment.Content</p>
                        }
                    }
                }
            </div>
        </div>
    }
}

@code {
    @*List<PostModel> posts;*@
    List<PostModel> posts;
    protected override async Task OnInitializedAsync()
    {
        posts = _posts.GetPosts().Result;
        @*string sql = $"SELECT * FROM post " +
                 $"LEFT JOIN comment " +
                 $"ON post.Id = comment.PostId;";

            var dict = new Dictionary<int, PostModel>();
            using (IDbConnection cnn = new MySqlConnection(_config.GetConnectionString("DevBlogDB")))
            {
                // TODO: I dont fully understand this
                cnn.Query<PostModel, CommentModel, PostModel>(sql,
                    (post, comment) =>
                    {
                        if (!dict.ContainsKey(post.Id))
                            dict.Add(post.Id, post);

                        var cach = dict[post.Id];

                        if (cach.Comments == null)
                            cach.Comments = new List<CommentModel>();

                        cach.Comments.Add(comment);

                        return null;
                    }, splitOn: "PostId");
            }

            // get all posts
            posts = await _data.LoadData<PostModel, CommentModel, dynamic>(new { }, _config.GetConnectionString("DevBlogDB"));

            posts.Reverse();*@
    }
}