@page "/posts"

@inject IHttpContextAccessor _http
@inject IPostRepository _posts
@inject ICommentRepository _comments
@inject IVoteRepository _votes
@inject AuthenticationStateProvider Auth
@inject IModalService _modal

<!-- Add Post -->
<AuthorizeView Policy="Admin">
    <button @onclick=ShowAddPost>Add Post</button>
</AuthorizeView>
@if (AllPosts == null)
{
<p>Loading...</p>
}
else
{

<!-- Page left / right -->
@*<Paginate />*@

<div>
    <button @onclick="@(e => NavTo("prev"))">PREV</button>
    @for (int i = 0; i < TotalPgs; i++)
        {
            var pgNum = i;
    <button style="background-color: @(CurrentPg == pgNum ? "#382424" : "#845555")" @onclick="@(e => UpdateList(pgNum))">
        @(i + 1)
    </button>
    }
    <button @onclick="@(e => NavTo("next"))">NEXT</button>
</div>
@*Render Posts *@
@foreach (var post in AllPosts)
    {
<div post>
    <section postInfo>
        <span>@post.UpdateNum</span>
        <span>@post.Date.ToShortDateString()</span>

        <!-- Delete / Edit Post -->
        <AuthorizeView Policy="Admin">
            <button @onclick="@(() => ShowEditPost(post.Id))">
                <EditIcon />
            </button>

            <button @onclick="() => DeletePost(post.Id)">
                <TrashIcon />
            </button>
        </AuthorizeView>

        <img src=@post.ImgURL />
        <p>@post.Description</p>
    </section>

    <!-- Voting System -->
    <div comments>
        <div>

            <AuthorizeView>
                <Authorized>
                    <div>
                        <button thumbIcon @onclick="async () => await _votes.UpVote(post.Id, _http.HttpContext.User.Identity.Name)">
                            <ThumbsUpIcon />
                        </button>
                        <span votes>@post.UpVotes.Count</span>

                        <button thumbIcon @onclick="async () => await _votes.DownVote(post.Id, _http.HttpContext.User.Identity.Name)">
                            <ThumbsDownIcon />
                        </button>
                        <span votes>@post.DownVotes.Count</span>
                    </div>
                </Authorized>
                <NotAuthorized>
                    <div>
                        <span thumbIcon><ThumbsUpIcon /></span>
                        <span votes>@post.UpVotes.Count</span>
                        <span thumbIcon><ThumbsDownIcon /></span>
                        <span votes>@post.DownVotes.Count</span>
                        <span>Login in to Like / Dislike</span>
                    </div>
                </NotAuthorized>
            </AuthorizeView>
        </div>
        <!-- Render Comments -->
        @if (post.Comments != null)
                {
                    foreach (var comment in post.Comments)
                    {
        <section comment>
            <span>@comment.UserName</span>
            <span>
                @comment.Date.ToString("MM/dd/yyyy hh:mm tt")

                <!-- Delete / Edit Comment -->
                <AuthorizeView Policy="Admin">
                    <button @onclick="async () => await _comments.Delete(comment.Id)">
                        <TrashIcon />
                    </button>
                </AuthorizeView>
                <AuthorizeView Policy="Visitor">
                    @if (comment.UserName == _http.HttpContext.User.Identity.Name)
                        {
                    <button @onclick="async () => await _comments.Delete(comment.Id)">
                        <TrashIcon />
                    </button>
                            }
                </AuthorizeView>
            </span>
            <p>@comment.Content</p>
        </section>
        }
                }

        <!-- Add Comment -->
        <section addComment>
            <AuthorizeView>
                <Authorized Context=" Auth">
                    <EditForm Model=@comment OnValidSubmit="() => AddComment(post.Id)">
                        <InputTextArea @bind-Value=comment.Content placeholder="Add a comment..." />
                        <button type="submit">Comment</button>
                    </EditForm>
                </Authorized>

                <NotAuthorized>
                    <textarea placeholder="Login in to leave a comment..">
                    </textarea>
                </NotAuthorized>
            </AuthorizeView>
        </section>
    </div>
</div>
}
}

@code {
    CommentVM comment = new CommentVM();

    public List<PostModel> PostsPage { get; set; }
    public List<PostModel> AllPosts { get; set; }

    public int PgSize { get; set; }
    public int TotalPgs { get; set; }
    public int CurrentPg { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AllPosts = await _posts.GetPosts();
        PgSize = 5;
        PostsPage = AllPosts.Take(PgSize).ToList();
        TotalPgs = (int)Math.Ceiling(AllPosts.Count() / (decimal)PgSize);

        //await appState.Refresh();
        //appState.OnDownVoteChange += () => InvokeAsync(StateHasChanged);
        //appState.OnUpVoteChange += () => InvokeAsync(StateHasChanged);
        //appState.OnPostChange += () => InvokeAsync(StateHasChanged);
        //appState.OnCommentChange += () => InvokeAsync(StateHasChanged);
    }

    async Task ShowAddPost()
    {
        await _modal.Show<AddPost>("Add Post").Result;
        //AllPosts = await _posts.GetPosts();
    }

    async Task ShowEditPost(int postId)
    {
        var param = new ModalParameters();
        param.Add(nameof(EditPost.Id), postId);
        await _modal.Show<EditPost>("Edit Post", param).Result;
        await OnInitializedAsync();
    }

    public async Task AddComment(int postId)
    {
        comment.UserName = _http.HttpContext.User.Identity.Name;
        comment.PostModelId = postId;
        await _comments.Create(comment);
        //await appState.AddComment(comment);
        comment = new CommentVM();
    }

    public async Task DeletePost(int postId)
    {
        await _posts.Delete(postId);
    }

    public void UpdateList(int pgNum)
    {
        PostsPage = AllPosts.Skip(pgNum * PgSize).Take(PgSize).ToList();
        CurrentPg = pgNum;
    }

    public void NavTo(string val)
    {
        if (val == "prev" && CurrentPg != 0)
            CurrentPg--;

        if (val == "next" && CurrentPg != TotalPgs - 1)
            CurrentPg++;

        UpdateList(CurrentPg);
    }

    public class CommentVM
    {
        public string UserName { get; set; }

        public int PostModelId { get; set; }

        public string Content { get; set; }
    }
}