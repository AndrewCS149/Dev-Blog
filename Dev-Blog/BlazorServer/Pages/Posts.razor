@page "/posts"

@using BlazorServer.Models
@using System.Security.Claims

@inject Interfaces.IPosts _posts
@inject Interfaces.IComments _comments
@inject Interfaces.IVotes _votes
@inject AuthenticationStateProvider Auth
@inject Data.AppDbContext DB

@if (posts == null)
{
    <p>Loading...</p>
}
else
{
    <!-- Add Post -->
    @if (admin)
    {
        <AuthorizeView>
            <NavLink href="/addpost/"> Add Post </NavLink>
        </AuthorizeView>
    }

    <!-- Render Posts -->
    @foreach (var post in posts)
    {
        <div style="margin-top: 20px;">

            <!-- Delete / Edit Post -->
            @if (admin)
            {
                string editUrl = $"/editpost/{post.Id}/";
                <AuthorizeView>
                    <NavLink href=@editUrl> <EditIcon /> </NavLink>
                    <button @onclick="() => DeletePost(post.Id)">
                        <TrashIcon />
                    </button>
                </AuthorizeView>
            }

            <p>@post.UpdateNum</p>
            <p>@post.Date.ToShortDateString()</p>
            <img src=@post.ImgURL />
            <p>@post.Description</p>

            <AuthorizeView>
                <Authorized>
                    <button @onclick="() => UpVote(post.Id, user.Identity.Name)" class="glyphicon glyphicon-thumbs-up"></button>
                    <span>@post.UpVotes.Count</span>
                    <button @onclick="() => DownVote(post.Id, user.Identity.Name)" class="glyphicon glyphicon-thumbs-down"></button>
                    <span>@post.DownVotes.Count</span>
                </Authorized>
                <NotAuthorized>
                    <button class="glyphicon glyphicon-thumbs-up"></button>
                    <span>@post.UpVotes.Count</span>
                    <button class="glyphicon glyphicon-thumbs-down"></button>
                    <span>@post.DownVotes.Count</span>
                    <span>Login in to Like / Dislike</span>
                </NotAuthorized>
            </AuthorizeView>

            <!-- Render Comments -->
            <div>
                @if (post.Comments != null)
                {
                    foreach (var comment in post.Comments)
                    {
                        <div>
                            <!-- Delete / Edit Comment -->
                            @if (admin)
                            {
                                <AuthorizeView>
                                    <button @onclick="() => DeleteComment(comment.Id)">
                                        <TrashIcon />
                                    </button>
                                </AuthorizeView>
                            }
                            <span>@comment.UserName</span>
                            <span> @comment.Date.ToString("MM/dd/yyyy hh:mm tt") </span>
                            <p>@comment.Content</p>
                        </div>
                    }
                }
            </div>

            <!-- Add Comment -->
            <div>
                <AuthorizeView>
                    <!-- if user is logged in -->
                    <Authorized Context="Auth">
                        <EditForm Model=@comment OnValidSubmit="() => AddComment(post.Id)">
                            <InputTextArea @bind-Value=comment.Content DisplayName="Add a comment..." />
                            <button type="submit">Comment</button>
                        </EditForm>
                    </Authorized>

                    <!-- if user is not logged in -->
                    <NotAuthorized>
                        <textarea placeholder="Login in to leave a comment..">
                        </textarea>
                    </NotAuthorized>
                </AuthorizeView>
            </div>
        </div>
    }
}

@code {
    CommentVM comment;
    List<PostModel> posts;
    bool admin;
    bool authenticated;
    ClaimsPrincipal user;

    protected override async Task OnInitializedAsync()
    {
        comment = new CommentVM();
        posts = await _posts.GetPosts();

        user = await GetUser();
        authenticated = IsAuthenticated(user);

        if (authenticated)
            admin = IsAdmin(user);
    }

    public async Task<ClaimsPrincipal> GetUser()
    {
        var authState = await Auth.GetAuthenticationStateAsync();
        var user = authState.User;
        return user;
    }

    public bool IsAuthenticated(ClaimsPrincipal user)
    {
        return user.Identity.IsAuthenticated ? true : false;
    }

    public bool IsAdmin(ClaimsPrincipal user)
    {
        return user.Claims.ToList()[6].Value == "Admin";
    }

    public async Task AddComment(int postId)
    {
        comment.UserName = user.Identity.Name;
        comment.PostModelId = postId;

        await _comments.Create(comment);
        comment = new CommentVM();
    }

    public async Task DeletePost(int postId)
    {
        await _posts.Delete(postId);
        posts = await _posts.GetPosts();
    }

    public async Task DeleteComment(int commentId)
    {
        await _comments.Delete(commentId);
        posts = await _posts.GetPosts();
    }

    public async Task UpVote(int postId, string username)
    {
        await _votes.UpVote(postId, username);
    }

    public async Task DownVote(int postId, string username)
    {
        await _votes.DownVote(postId, username);
    }

    public class CommentVM
    {
        public string UserName { get; set; }

        public int PostModelId { get; set; }

        public string Content { get; set; }
    }
}