@inject AuthenticationStateProvider Auth
@inject NavigationManager navMgr

<nav>
    <!-- LOGO -->
    <img src="/Imgs/Logo.png" height="115" width="100" />

    <!-- HOME LINK -->
    <NavLink href="/">
        The Dev Blog
    </NavLink>

    <div>
        <ul>

            <!-- PAGE LINKS -->
            <NavLink href="/">
                Home
            </NavLink>
            <NavLink href="/Posts">
                Status
            </NavLink>
            <NavLink href="/About">
                About
            </NavLink>

            @{
                <!-- IF USER IS SIGNED IN -->
                @*<AuthorizeView>
                        <Authorized>
                            <h4>Hello, @context.User.Identity.Name!</h4>
                            <p>This content is only visible if user is authenticated.</p>
                        </Authorized>
                        <NotAuthorized>
                            <p>Please signed in.</p>
                        </NotAuthorized>
                    </AuthorizeView>*@

                if (authenticated)
                {
                    <!-- WELCOME USER -->
                    <NavLink>
                        <a>Welcome @username</a>
                    </NavLink>

                    <!-- LOGOUT -->
                    <NavLink>
                        <form style="display : inline;" method="post" action="/signout">
                            <input type="submit" value="sign out" />
                        </form>
                    </NavLink>
                }

                <!-- LOGIN / SIGN UP -->
                else
                {
                    <NavLink href="/login">
                        LOGIN
                    </NavLink>
                    @*<li>*@
                    @*@{ await Html.RenderPartialAsync("../Account/_Login", Model.Input);}*@
                    @*LOGIN
                        </li>*@
                    <li>
                        @*@{ await Html.RenderPartialAsync("../Account/_Register", Model.Input);}*@
                        SIGN UP
                    </li>
                }
            }
        </ul>
    </div>
</nav>

@code {
    private bool authenticated;
    private string username;

    protected override async Task OnInitializedAsync()
    {
        authenticated = GetAuthState().Result;
    }

    public async Task<bool> GetAuthState()
    {
        var authState = await Auth.GetAuthenticationStateAsync();
        var user = authState.User;
        username = user.Identity.Name;
        return user.Identity.IsAuthenticated ? true : false;
    }

}