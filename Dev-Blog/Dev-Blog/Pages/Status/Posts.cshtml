@page
@model Dev_Blog.Pages.Status.PostsModel
@{
    ViewData["Title"] = "Updates";
    Layout = "_Layout";
}

<head>
    <link rel="stylesheet" type="text/css" href="~/css/Posts.css" />
    <title>Status</title>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
</head>
<body id="bootstrap-override">
    <main>
        <div class="container">
            @{
                @*if (User.Identity.IsAuthenticated)
                    {
                        if (User.Identity.Name == Model.AdminUser)
                        {*@
                <!-- Add Post -->
                <a edit id="add-post" class="btn btn-secondary" asp-page="Add">Add Post</a>
                @*}
                    }*@
                if (Model.Posts != null)
                {
                    <!-- Pagination -->
                    await Html.RenderPartialAsync("_Pages", Model);

                    <!-- All Posts -->
                    foreach (var post in Model.Posts)
                    {
                        string formId = "form" + post.Id;
                        string upVoteId = "upVote" + post.Id;
                        string downVoteId = "downVote" + post.Id;
                        string voteSystem = "voteSystem" + post.Id;
                        <div class="card">
                            <div class="card-header">
                                <span>
                                    Update
                                    <strong>@post.UpdateNum</strong>
                                </span>
                                <div class="float-right">
                                    <strong>@post.Date.ToShortDateString()</strong>

                                    <!-- Delete/Edit post form -->
                                    @if (User.Identity.Name == Model.AdminUser)
                                    {
                                        <form method="post" class="delete-form">
                                            <input hidden asp-for=@post.Id>
                                            <button asp-page-handler="DeletePost" type="submit">
                                                @{ await Html.RenderPartialAsync("../Icons/_TrashIcon");}
                                            </button>
                                            <a edit class="nav-link" asp-route-id=@post.Id asp-page="Edit">
                                                @{ await Html.RenderPartialAsync("../Icons/_EditIcon");}
                                            </a>
                                        </form>
                                    }
                                </div>
                            </div>

                            <!-- Post Information -->
                            <div class="card-body text-center">
                                <img class="update-img" src=@post.ImgURL />
                                <p class="post-description">@post.Description</p>

                                <!-- Voting System -->
                                <div id=@voteSystem class="voting-system text-left">
                                    <form>
                                        <!-- UpVote -->
                                        <input hidden asp-for="@post.Id" value=@post.Id />
                                        <button vote id=@upVoteId value=@post.Id class="upVoteHandler glyphicon glyphicon-thumbs-up"></button>
                                        <span up>@post.UpVotes</span>

                                        <!-- DownVote -->
                                        <input hidden asp-for="@post.Id" value=@post.Id />
                                        <button vote id=@downVoteId value=@post.Id down class="downVoteHandler glyphicon glyphicon-thumbs-down"></button>
                                        <span down>@post.DownVotes</span>

                                        @if (!User.Identity.IsAuthenticated)
                                        {
                                            <span class="login-to-vote">Sign in to like/dislike</span>
                                        }
                                    </form>
                                </div>
                            </div>

                            @if (post.Comments != null)
                            {
                                foreach (var comment in post.Comments)
                                {
                                    <!-- Comment -->
                                    <div comment class="posted-comments comment-box">
                                        <span class="glyphicon glyphicon-user user-icon"></span>
                                        <span class="comment-username">@comment.UserName</span>
                                        <div class="float-right">
                                            <span>@comment.Date.ToString("MM/dd/yyyy hh:mm tt")</span>

                                            <!--Delete Comment Button-->
                                            <form method="post" class="delete-form">
                                                @if (User.Identity.Name == Model.AdminUser)
                                                {
                                                    <input hidden asp-for=@comment.Id>
                                                    <button type="submit" asp-page-handler="DeleteComment">
                                                        @{ await Html.RenderPartialAsync("../Icons/_TrashIcon");}
                                                    </button>
                                                }
                                            </form>
                                        </div>
                                        <p>@comment.Content</p>
                                    </div>
                                }
                            }
                            <!-- Comment Box -->
                            <div id=@formId class="comment-box form-group">
                                @if (User.Identity.IsAuthenticated)
                                {
                                    <form>
                                        <textarea maxlength="750" asp-for=@Model.Comment.Content class="form-control" placeholder="comment.." rows="2"></textarea>
                                        <input hidden asp-for="@post.Id" value=@post.Id />
                                        <button class="commentBtn btn btn-secondary" value=@post.Id>Comment</button>
                                    </form>
                                }
                                else
                                {
                                    <textarea class="form-control" placeholder="Login in to leave a comment.."></textarea>
                                }
                            </div>
                        </div>
                    }
                    <!-- Pagination -->
                    await Html.RenderPartialAsync("_Pages", Model);
                }
            }
        </div>
    </main>
    <script src="~/js/Posts.js" type="text/javascript"></script>
    <script>
        $(document).ready(function () {

            // grab the correct ID
            var postId;

            $(".commentBtn").on("click", function (e) {
                postId = $(this).attr('value');

                var CommentVM = {
                    PostId: parseInt($(`#form${postId} input`).val()),
                    Content: $(`#form${postId} textarea`).val()
                }

                $(`#form${postId} textarea`).val("");

                // ajax call to post comment to database
                $.ajax({
                    contentType: "application/json; charset=utf-8",
                    type: "POST",
                    url: '@Url.Action("PostComment", "Ajax")',
                    data: JSON.stringify(CommentVM),
                    dataType: "json",
                    async: true,
                    success: function (data) {
                        console.log("Success");

                        // if comment is over 750 characters
                        if (data[1] === "unsuccessful") {
                            $(`#form${postId} textarea`).val(data[0]);
                        } else {
                            renderComment(data[0], data[1], postId);
                        }
                    },
                    error: function () {
                        console.log("ERROR");
                    }
                });

                e.preventDefault();
            });

            // ajax call to send upvote to database
            $(".upVoteHandler").on("click", function (e) {
                postId = $(this).attr('value');

                var VoteVM = {
                    PostId: parseInt(postId)
                }

                $.ajax({
                    contentType: "application/json; charset=utf-8",
                    type: "POST",
                    url: '@Url.Action("UpVote", "Ajax")',
                    data: JSON.stringify(VoteVM),
                    dataType: "json",
                    async: true,
                    success: function (data) {
                        console.log("Success");
                        updateVotes(data[0], data[1], postId);
                    },
                    error: function () {
                        console.log("ERROR");
                    }
                })
                e.preventDefault();
            })

            // ajax call to send downvote to database
            $(".downVoteHandler").on("click", function (e) {
                postId = $(this).attr('value');

                var VoteVM = {
                    PostId: parseInt(postId)
                }

                $.ajax({
                    contentType: "application/json; charset=utf-8",
                    type: "POST",
                    url: '@Url.Action("DownVote", "Ajax")',
                    data: JSON.stringify(VoteVM),
                    dataType: "json",
                    async: true,
                    success: function (data) {
                        console.log("Success");
                        updateVotes(data[0], data[1], postId);
                    },
                    error: function () {
                        console.log("ERROR");
                    }
                })
                e.preventDefault();
            });

            // update the vote count
            var updateVotes = function (upVotes, downVotes, id) {
                $(`#voteSystem${id} span:first-of-type`).text(upVotes);
                $(`#voteSystem${id} span:last-of-type`).text(downVotes);
            }

            // new comment to render to page
            var renderComment = function (comment, date, idx) {
                $(`#form${idx}`).before(
                    $(`<div comment class="posted-comments comment-box">` +
                        `<span class="glyphicon glyphicon-user user-icon"></span>` +
                        `<span class="comment-username">${comment.UserName}</span>` +
                        `<div class="float-right">` +
                        `<span>${date}</span>` +
                        `</div>` +
                        `<p>${comment.Content}</p>` +
                        `</div>`
                    )
                );
            }
        });
    </script>
</body>